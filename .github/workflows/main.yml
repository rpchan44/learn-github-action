name: Publish Docker image and update k8s manifest

on:
  push:
    branches: ['main']

jobs:
  push_to_registry:
    name: Push Docker image to Docker Hub and Update Kustomize
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repo with Dockerfile
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: rpchan44/webapp-dev

      - name: Log Docker version
        run: docker --version

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
            
      - name: Get version number (increment commit count)
        id: version
        run: |
          # Get the commit count and create a simple version number
          VERSION=$(git rev-list --count HEAD)
          echo "VERSION=v$VERSION" >> $GITHUB_ENV
          echo "Docker image will be tagged with: v$VERSION"
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            rpchan44/webapp-dev:$VERSION
          labels: ${{ steps.meta.outputs.labels }}

      - name: Check out the Kustomize repository
        uses: actions/checkout@v4
        with:
          repository: rpchan44/k8s-control
          token: ${{ secrets.GH_TOKEN }}
          path: ''
          show-progress: true
      
      - name: Update Kustomize manifest with new image
        run: |
          echo "Updating kustomization.yaml to use the latest image tag"
          
          # Get the first tag from metadata (if multiple tags are present)
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}")
          
          # Update the apps.yaml file with the correct image tag using sed
          sed -i "s|version=.*|version=$IMAGE_TAG-${{ github.sha }}|" overlays/dev/kustomization.yaml
          
          
      - name: Commit changes to Kustomize repository
        run: |
          git config --global user.name "rpchan44"
          git config --global user.email "ronaldopchan@outlook.com"
          git add overlays/dev/kustomization.yaml
          git commit -m "Automation @ Github actions! Update Docker image tag in apps.yaml"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        continue-on-error: true
        # Set up ArgoCD CLI
    
      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64
  
      # Login to ArgoCD
      - name: Login to ArgoCD
        run: |
          argocd --grpc-web login ${{ secrets.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }}
  
      # Sync the application
      - name: Sync ArgoCD Application
        run: |
          argocd app sync machx-dev --grpc-web
